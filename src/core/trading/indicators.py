import pandas as pd
from typing import List, Optional, Callable
from dataclasses import dataclass


@dataclass
class IndicatorSignal:
    """Represents a trading signal generated by an indicator."""

    indicator_name: str
    symbol: str
    action: str  # 'buy' or 'sell'
    timestamp: pd.Timestamp
    value: float
    threshold: float


class TechnicalIndicators:
    """
    Handles calculation and management of technical indicators.
    """

    def __init__(self, data: pd.DataFrame):
        """Initialize with a DataFrame containing price data."""
        self.data = data
        self.signals: List[IndicatorSignal] = []
        self._indicators = {}

    def add_sma(
        self, period: int, column: str = "close", name: Optional[str] = None
    ) -> str:
        """Add Simple Moving Average indicator."""
        name = name or f"sma_{period}"
        self._indicators[name] = self.data[column].rolling(window=period).mean()
        return name

    def add_ema(
        self, period: int, column: str = "close", name: Optional[str] = None
    ) -> str:
        """Add Exponential Moving Average indicator."""
        name = name or f"ema_{period}"
        self._indicators[name] = self.data[column].ewm(span=period, adjust=False).mean()
        return name

    def add_rsi(
        self, period: int = 14, column: str = "close", name: Optional[str] = None
    ) -> str:
        """Add Relative Strength Index indicator."""
        name = name or f"rsi_{period}"
        delta = self.data[column].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        self._indicators[name] = 100 - (100 / (1 + rs))
        return name

    def add_macd(
        self,
        fast_period: int = 12,
        slow_period: int = 26,
        signal_period: int = 9,
        column: str = "close",
    ) -> tuple:
        """Add MACD indicator."""
        fast_ema = self.data[column].ewm(span=fast_period, adjust=False).mean()
        slow_ema = self.data[column].ewm(span=slow_period, adjust=False).mean()
        macd_line = fast_ema - slow_ema
        signal_line = macd_line.ewm(span=signal_period, adjust=False).mean()

        self._indicators["macd_line"] = macd_line
        self._indicators["macd_signal"] = signal_line
        self._indicators["macd_histogram"] = macd_line - signal_line

        return "macd_line", "macd_signal", "macd_histogram"

    def add_bollinger_bands(
        self, period: int = 20, std_dev: float = 2.0, column: str = "close"
    ) -> tuple:
        """Add Bollinger Bands indicator."""
        middle_band = self.data[column].rolling(window=period).mean()
        std = self.data[column].rolling(window=period).std()

        self._indicators["bb_middle"] = middle_band
        self._indicators["bb_upper"] = middle_band + (std_dev * std)
        self._indicators["bb_lower"] = middle_band - (std_dev * std)

        return "bb_upper", "bb_middle", "bb_lower"

    def add_atr(self, period: int = 14) -> str:
        """Add Average True Range indicator."""
        high = self.data["high"]
        low = self.data["low"]
        close = self.data["close"]

        tr1 = high - low
        tr2 = abs(high - close.shift())
        tr3 = abs(low - close.shift())

        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        self._indicators["atr"] = tr.rolling(window=period).mean()

        return "atr"

    def set_signal_conditions(
        self,
        indicator_name: str,
        buy_condition: Callable,
        sell_condition: Callable,
        buy_threshold: float,
        sell_threshold: float,
    ):
        """Set conditions for generating trading signals."""
        if indicator_name not in self._indicators:
            raise ValueError(f"Indicator {indicator_name} not found")

        indicator_values = self._indicators[indicator_name]
        latest_value = indicator_values.iloc[-1]

        # Check buy condition
        if buy_condition(latest_value, buy_threshold):
            self.signals.append(
                IndicatorSignal(
                    indicator_name=indicator_name,
                    symbol=self.data.index[-1],
                    action="buy",
                    timestamp=self.data.index[-1],
                    value=latest_value,
                    threshold=buy_threshold,
                )
            )

        # Check sell condition
        if sell_condition(latest_value, sell_threshold):
            self.signals.append(
                IndicatorSignal(
                    indicator_name=indicator_name,
                    symbol=self.data.index[-1],
                    action="sell",
                    timestamp=self.data.index[-1],
                    value=latest_value,
                    threshold=sell_threshold,
                )
            )

    def get_indicator_value(self, name: str) -> pd.Series:
        """Get the values for a specific indicator."""
        return self._indicators.get(name)

    def get_latest_signals(self) -> List[IndicatorSignal]:
        """Get the latest trading signals."""
        return self.signals

    def clear_signals(self):
        """Clear all stored signals."""
        self.signals.clear()
